{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/forms-exercise-solution",
    "result": {"data":{"markdownRemark":{"html":"<p><a href=\"https://github.com/kadikraman/AwesomeProjectExpo/commit/04d7c8fc4b9d9ad9550f541f256136487f840fa9\">🔗 Expo 04d7c8fc4b9d9ad9550f541f256136487f840fa9</a></p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/709f85b03bead57852da3a29fc7515bbb2219afc\">🔗 RN 709f85b03bead57852da3a29fc7515bbb2219afc</a></p>\n<p>The main difficulty in this exercise is the issue of how to keep track of the value of so many toggle buttons. They key is to build an update function that can handle it. The switch component can return both the color the user is interacting with and whether they turned the switch on or off. This makes things simples for us, so we can add the color to the color array if they turned to switch on, and remove it otherwise:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedColors<span class=\"token punctuation\">,</span> setSelectedColors<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handleUpdate <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setSelectedColors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>current<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setSelectedColors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span>\n        current<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>colorName <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">.</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>selectedColors<span class=\"token punctuation\">,</span> setSelectedColors<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, to figure out the value for the <code class=\"language-text\">Switch</code>, you can check whether the current color exists in <code class=\"language-text\">selectedColors</code>. Note that <code class=\"language-text\">!!</code> is a shorthand for making the value a boolean, so <code class=\"language-text\">!!undefined === false</code> and <code class=\"language-text\">!!{} === true</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Switch\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>selectedColors<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span> <span class=\"token operator\">=></span> color<span class=\"token punctuation\">.</span>colorName <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  onValueChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">newValue</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>The other difficulty is how to pass the color palette back to the Home screen. You might be tempted to do it using a callback, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">navigation<span class=\"token punctuation\">.</span><span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AddNewPalette'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">onSubmit</span><span class=\"token operator\">:</span> handleSubmit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will work, but you will yet a yellow box warning that you shouldn't do it. Instead, you should use the navigation prop:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newPalette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnavigation<span class=\"token punctuation\">.</span><span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> newPalette <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will make the <code class=\"language-text\">newPalette</code> prop available on the home screen via the <code class=\"language-text\">route</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newPalette <span class=\"token operator\">=</span> route<span class=\"token punctuation\">.</span>params <span class=\"token operator\">?</span> route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>newPalette <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You'll have to make sure <code class=\"language-text\">route.params</code> exist here, because they don't by default.</p>\n<p>Finally, we can now use <code class=\"language-text\">useEffect</code> to update the palettes and add the new one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newPalette<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setPalettes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>newPalette<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>newPalette<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we added <code class=\"language-text\">[newPalette]</code> as the second argument - this means that the effect is run once on launch, and then if and only if the value of <code class=\"language-text\">newPalette</code> changes.</p>\n<h3 id=\"adding-more-functionality\" style=\"position:relative;\"><a href=\"#adding-more-functionality\" aria-label=\"adding more functionality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding more functionality</h3>\n<p>That's all for now! You could take this little application further and add some enhancements of your own. Here are some ideas:</p>\n<ul>\n<li>copy the hex code of a color to clipboard when the user taps on it (leverage the <a href=\"https://github.com/react-native-community/clipboard\">Clipboard component</a> for it)</li>\n<li>display a preview of the colors in the modal so the user can see what they're picking</li>\n<li>disable the button if the form is invalid</li>\n</ul>","frontmatter":{"path":"/forms-exercise-solution","title":"Form exercise solution 👀","order":28}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":0,"path":"/intro","title":"Welcome"}}},{"node":{"frontmatter":{"order":1,"path":"/react-native","title":"About React Native"}}},{"node":{"frontmatter":{"order":2,"path":"/the-expo-debate","title":"Should you use Expo or plain React Native?"}}},{"node":{"frontmatter":{"order":3,"path":"/setup-expo","title":"[Expo] Getting started with Expo"}}},{"node":{"frontmatter":{"order":4,"path":"/setup-rn","title":"[RN] Getting started with plain React Native"}}},{"node":{"frontmatter":{"order":5,"path":"/code-style","title":"Adding a linter"}}},{"node":{"frontmatter":{"order":6,"path":"/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":7,"path":"/intro-to-react","title":"Basic React Native components"}}},{"node":{"frontmatter":{"order":8,"path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":9,"path":"/styling-exercise","title":"Styling Exercise 📝"}}},{"node":{"frontmatter":{"order":10,"path":"/styling-exercise-solution","title":"Styling Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":11,"path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":12,"path":"/lists","title":"Lists"}}},{"node":{"frontmatter":{"order":13,"path":"/lists-exercise","title":"Lists Exercise 📝"}}},{"node":{"frontmatter":{"order":14,"path":"/lists-exercise-solution","title":"Lists Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":15,"path":"/navigation-intro","title":"Navigation Intro"}}},{"node":{"frontmatter":{"order":16,"path":"/navigation-expo","title":"[Expo] Adding navigation with Expo"}}},{"node":{"frontmatter":{"order":17,"path":"/navigation-rn","title":"[RN] Adding navigation with plain React Native"}}},{"node":{"frontmatter":{"order":18,"path":"/adding-navigation","title":"Adding Navigation"}}},{"node":{"frontmatter":{"order":19,"path":"/navigation-exercise","title":"Navigation Exercise 📝"}}},{"node":{"frontmatter":{"order":20,"path":"/navigation-exercise-solution","title":"Navigation Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":21,"path":"/react-hooks","title":"useState, useCallback, useEffect"}}},{"node":{"frontmatter":{"order":22,"path":"/network-requests-exercise","title":"Network Requests Exercise 📝"}}},{"node":{"frontmatter":{"order":23,"path":"/network-requests-exercise-solution","title":"Network Requests Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":24,"path":"/pull-to-refresh","title":"Pull to refresh"}}},{"node":{"frontmatter":{"order":25,"path":"/forms","title":"Overview of Forms in React Native"}}},{"node":{"frontmatter":{"order":26,"path":"/modals","title":"Opening a full screen modal"}}},{"node":{"frontmatter":{"order":27,"path":"/forms-exercise","title":"Form exercise 📝"}}},{"node":{"frontmatter":{"order":28,"path":"/forms-exercise-solution","title":"Form exercise solution 👀"}}},{"node":{"frontmatter":{"order":29,"path":"/wrapping-up","title":"Wrapping up"}}},{"node":{"frontmatter":{"order":30,"path":"/ejecting-from-expo","title":"[Expo] Ejecting from Expo"}}},{"node":{"frontmatter":{"order":31,"path":"/platform-specific-code","title":"Platform Specific Code"}}},{"node":{"frontmatter":{"order":32,"path":"/security","title":"Security"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["643629163"]}