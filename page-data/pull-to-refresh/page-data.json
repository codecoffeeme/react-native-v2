{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/pull-to-refresh",
    "result": {"data":{"markdownRemark":{"html":"<p>Next we'd like to show the user when we're fetching data. Thankfully for us, native components have a scroll indicator built in! This comes in the form of <a href=\"https://reactnative.dev/docs/refreshcontrol\">RefreshControl</a> and you can use it with any <em>scrollable</em> component: ScrollView, FlatList or SectionList.</p>\n<p>All these scrollable components have a <code class=\"language-text\">refreshControl</code> props which should be used to pass in or customize the <code class=\"language-text\">RefreshControl</code> components. Let's import it and add it to our <code class=\"language-text\">FlatList</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RefreshControl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>FlatList\n  refreshControl<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>RefreshControl refreshing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> onRefresh<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you should see that the refreshControl is always visible! This is because we set the <code class=\"language-text\">refreshing</code> prop to always be true. Let's make this dynamic. First we'll need to create a new <code class=\"language-text\">useState</code> variable to hold the refreshing state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isRefreshing<span class=\"token punctuation\">,</span> setIsRefreshing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we'll need a callback that</p>\n<ol>\n<li>sets the refreshing state to <code class=\"language-text\">true</code></li>\n<li>re-fetches the data</li>\n<li>sets the refreshing state back to <code class=\"language-text\">false</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> handleRefresh <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setIsRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">handleFetchPalettes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setIsRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, let's pass the relevant variables into our <code class=\"language-text\">&lt;RefreshControl></code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>RefreshControl refreshing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isRefreshing<span class=\"token punctuation\">}</span> onRefresh<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRefresh<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>In most cases, that's it! For me in this case I found that my API was too fast (what a problem to have, eh?) so I added a timeout to ensure the loading spinner is displayed for at least 1 second. It seems silly to make the app artificually <em>slower</em>, but sometimes it is a good practice from the UX point of view.</p>\n<p>All you'll need to do it wrap the last <code class=\"language-text\">setIsRefreshing</code> in a <code class=\"language-text\">setTimeout</code>. The second argument for <code class=\"language-text\">setTimeout</code> is the length of the timeout in milliseconds:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setIsRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectExpo/commit/899a3cefa738543f6e7d2782bb6833539f27166c\">🔗 Expo 899a3cefa738543f6e7d2782bb6833539f27166c</a></p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/14e0ae8a3dc7c2922fb0a4ce984e2e9d74ed9b77\">🔗 RN 14e0ae8a3dc7c2922fb0a4ce984e2e9d74ed9b77</a></p>\n<p><a href=\"https://github.com/FrontendMasters/AwesomeProjectExpo/commit/b603cac8a50751c2e7db6a5df331fa69567b328d\">👩‍💻 Live Coding b603cac8a50751c2e7db6a5df331fa69567b328d</a></p>","frontmatter":{"path":"/pull-to-refresh","title":"Pull to refresh","order":24}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":0,"path":"/intro","title":"Welcome"}}},{"node":{"frontmatter":{"order":1,"path":"/react-native","title":"About React Native"}}},{"node":{"frontmatter":{"order":2,"path":"/the-expo-debate","title":"Should you use Expo or plain React Native?"}}},{"node":{"frontmatter":{"order":3,"path":"/setup-expo","title":"[Expo] Getting started with Expo"}}},{"node":{"frontmatter":{"order":4,"path":"/setup-rn","title":"[RN] Getting started with plain React Native"}}},{"node":{"frontmatter":{"order":5,"path":"/code-style","title":"Adding a linter"}}},{"node":{"frontmatter":{"order":6,"path":"/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":7,"path":"/intro-to-react","title":"Basic React Native components"}}},{"node":{"frontmatter":{"order":8,"path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":9,"path":"/styling-exercise","title":"Styling Exercise 📝"}}},{"node":{"frontmatter":{"order":10,"path":"/styling-exercise-solution","title":"Styling Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":11,"path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":12,"path":"/lists","title":"Lists"}}},{"node":{"frontmatter":{"order":13,"path":"/lists-exercise","title":"Lists Exercise 📝"}}},{"node":{"frontmatter":{"order":14,"path":"/lists-exercise-solution","title":"Lists Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":15,"path":"/navigation-intro","title":"Navigation Intro"}}},{"node":{"frontmatter":{"order":16,"path":"/navigation-expo","title":"[Expo] Adding navigation with Expo"}}},{"node":{"frontmatter":{"order":17,"path":"/navigation-rn","title":"[RN] Adding navigation with plain React Native"}}},{"node":{"frontmatter":{"order":18,"path":"/adding-navigation","title":"Adding Navigation"}}},{"node":{"frontmatter":{"order":19,"path":"/navigation-exercise","title":"Navigation Exercise 📝"}}},{"node":{"frontmatter":{"order":20,"path":"/navigation-exercise-solution","title":"Navigation Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":21,"path":"/react-hooks","title":"useState, useCallback, useEffect"}}},{"node":{"frontmatter":{"order":22,"path":"/network-requests-exercise","title":"Network Requests Exercise 📝"}}},{"node":{"frontmatter":{"order":23,"path":"/network-requests-exercise-solution","title":"Network Requests Exercise Solution 👀"}}},{"node":{"frontmatter":{"order":24,"path":"/pull-to-refresh","title":"Pull to refresh"}}},{"node":{"frontmatter":{"order":25,"path":"/forms","title":"Overview of Forms in React Native"}}},{"node":{"frontmatter":{"order":26,"path":"/modals","title":"Opening a full screen modal"}}},{"node":{"frontmatter":{"order":27,"path":"/forms-exercise","title":"Form exercise 📝"}}},{"node":{"frontmatter":{"order":28,"path":"/forms-exercise-solution","title":"Form exercise solution 👀"}}},{"node":{"frontmatter":{"order":29,"path":"/wrapping-up","title":"Wrapping up"}}},{"node":{"frontmatter":{"order":30,"path":"/ejecting-from-expo","title":"[Expo] Ejecting from Expo"}}},{"node":{"frontmatter":{"order":31,"path":"/platform-specific-code","title":"Platform Specific Code"}}},{"node":{"frontmatter":{"order":32,"path":"/security","title":"Security"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["643629163"]}