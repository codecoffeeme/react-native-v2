{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/lists",
    "result": {"data":{"markdownRemark":{"html":"<p>What if instead of 4 colors, we had 10 or even 100? How would we display them then? If you're already familiar with React, you might be tempted to add all the colors in an array and <code class=\"language-text\">.map</code> over them. This is a very common mistake for newcomers to React Native. While it may be fine to do on the web, in React Native you should avoid using map in the render. This is because mapping over an array is not optimized. React Native will attempt to render every single element in the array all at once, regardless of whether they are visible on the screen or not.</p>\n<p>There are special components in React Native for rendering lists: these are <a href=\"https://reactnative.dev/docs/flatlist\">FlatList</a> and <a href=\"https://reactnative.dev/docs/sectionlist\">SectionList</a>.</p>\n<h3 id=\"flatlist\" style=\"position:relative;\"><a href=\"#flatlist\" aria-label=\"flatlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FlatList</h3>\n<p>FlatList has a whole bunch of configuration options, but the minimum you will need to give it is 3 props:</p>\n<ul>\n<li>data - this is the array of data you want to map over</li>\n<li>renderItem - this is a function that is passed the item and its index and will return the individual item component</li>\n<li>keyExtractor - this is a function that gets passed an item and its index</li>\n</ul>\n<p><a href=\"https://snack.expo.io/@kadikraman/flatlist-example\">üîç FlatList example</a></p>\n<p>In this FlatList example, you'll see an array of foods being displayed using a FlatList.</p>\n<h3 id=\"sectionlist\" style=\"position:relative;\"><a href=\"#sectionlist\" aria-label=\"sectionlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SectionList</h3>\n<p>SectionList is a similar to FlatList, but it allows you to render items in sections with a header item between. The data for the SectionList is still an array, but each array item will need to be an object with a title (a string) and a data (an array) prop.</p>\n<p>Additionally you can pass in a prop called <code class=\"language-text\">renderSectionHeader</code> which will let you render the title for each section.</p>\n<p><a href=\"https://snack.expo.io/@kadikraman/sectionlist-example\">üîç SectionList example</a></p>\n<p>This is incredibly powerful and provides a really nice native experience for the user on the device.</p>\n<h2 id=\"list-props\" style=\"position:relative;\"><a href=\"#list-props\" aria-label=\"list props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List props</h2>\n<p>The list elements have a bunch of built in properties to help customize for your experience. Check out the <a href=\"https://reactnative.dev/docs/flatlist\">FlatList</a> and <a href=\"https://reactnative.dev/docs/sectionlist\">SectionList</a> docs for all of them. Here are some I tend to use most often:</p>\n<ul>\n<li><a href=\"https://reactnative.dev/docs/flatlist#itemseparatorcomponent\">ItemSeparatorComponent</a>- renders a custom separator between your items. Handy if you have to e.g. render a line or even something dynamic instead of building it into the list items</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#listemptycomponent\">ListEmptyComponent</a> - this is rendered when the <code class=\"language-text\">data</code> is an empty array or undefined. Saves you from doing conditional rendering manually!</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#listfootercomponent\">ListFooterComponent</a> - renders something at the bottom of the list</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#listheadercomponent\">ListHeaderComponent</a> - renders something at the top of the list</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#extradata\">extraData</a> - the list only gets re-rendered if the <code class=\"language-text\">DATA</code> changes. It might happen though that what you display depends on some external factors. In this case use the <code class=\"language-text\">extraData</code> to pass in any variables that should also trigger a re-render when changed</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#extradata\">horizontal</a> - render the list horizontally instead of vertically</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#extradata\">numColumns</a> - render multiple columns</li>\n<li><a href=\"https://reactnative.dev/docs/flatlist#extradata\">onEndReached</a> - fires when the user has scrolled to the end of the list. Handy for pagination</li>\n</ul>","frontmatter":{"path":"/lists","title":"Lists","order":12}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":0,"path":"/intro","title":"Welcome"}}},{"node":{"frontmatter":{"order":1,"path":"/react-native","title":"About React Native"}}},{"node":{"frontmatter":{"order":2,"path":"/the-expo-debate","title":"Should you use Expo or plain React Native?"}}},{"node":{"frontmatter":{"order":3,"path":"/setup-expo","title":"[Expo] Getting started with Expo"}}},{"node":{"frontmatter":{"order":4,"path":"/setup-rn","title":"[RN] Getting started with plain React Native"}}},{"node":{"frontmatter":{"order":5,"path":"/code-style","title":"Adding a linter"}}},{"node":{"frontmatter":{"order":6,"path":"/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":7,"path":"/intro-to-react","title":"Basic React Native components"}}},{"node":{"frontmatter":{"order":8,"path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":9,"path":"/styling-exercise","title":"Styling Exercise üìù"}}},{"node":{"frontmatter":{"order":10,"path":"/styling-exercise-solution","title":"Styling Exercise Solution üëÄ"}}},{"node":{"frontmatter":{"order":11,"path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":12,"path":"/lists","title":"Lists"}}},{"node":{"frontmatter":{"order":13,"path":"/lists-exercise","title":"Lists Exercise üìù"}}},{"node":{"frontmatter":{"order":14,"path":"/lists-exercise-solution","title":"Lists Exercise Solution üëÄ"}}},{"node":{"frontmatter":{"order":15,"path":"/navigation-intro","title":"Navigation Intro"}}},{"node":{"frontmatter":{"order":16,"path":"/navigation-expo","title":"[Expo] Adding navigation with Expo"}}},{"node":{"frontmatter":{"order":17,"path":"/navigation-rn","title":"[RN] Adding navigation with plain React Native"}}},{"node":{"frontmatter":{"order":18,"path":"/adding-navigation","title":"Adding Navigation"}}},{"node":{"frontmatter":{"order":19,"path":"/navigation-exercise","title":"Navigation Exercise üìù"}}},{"node":{"frontmatter":{"order":20,"path":"/navigation-exercise-solution","title":"Navigation Exercise Solution üëÄ"}}},{"node":{"frontmatter":{"order":21,"path":"/react-hooks","title":"useState, useCallback, useEffect"}}},{"node":{"frontmatter":{"order":22,"path":"/network-requests-exercise","title":"Network Requests Exercise üìù"}}},{"node":{"frontmatter":{"order":23,"path":"/network-requests-exercise-solution","title":"Network Requests Exercise Solution üëÄ"}}},{"node":{"frontmatter":{"order":24,"path":"/pull-to-refresh","title":"Pull to refresh"}}},{"node":{"frontmatter":{"order":25,"path":"/forms","title":"Overview of Forms in React Native"}}},{"node":{"frontmatter":{"order":26,"path":"/modals","title":"Opening a full screen modal"}}},{"node":{"frontmatter":{"order":27,"path":"/forms-exercise","title":"Form exercise üìù"}}},{"node":{"frontmatter":{"order":28,"path":"/forms-exercise-solution","title":"Form exercise solution üëÄ"}}},{"node":{"frontmatter":{"order":29,"path":"/wrapping-up","title":"Wrapping up"}}},{"node":{"frontmatter":{"order":30,"path":"/ejecting-from-expo","title":"[Expo] Ejecting from Expo"}}},{"node":{"frontmatter":{"order":31,"path":"/platform-specific-code","title":"Platform Specific Code"}}},{"node":{"frontmatter":{"order":32,"path":"/security","title":"Security"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["643629163"]}